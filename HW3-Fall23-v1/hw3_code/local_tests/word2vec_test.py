import numpy as np
import torch

class Word2Vec_Test():
	def __init__(self):

		# v1 local test outputs
		# Sample input: 
		self.corpus_data = ['he is a king', 'she is a queen', 'warsaw is poland capital', 'she is a queen she is']
		

		# Sample outputs:
		self.tokens = [['he', 'is', 'a', 'king'], 
						['she', 'is', 'a', 'queen'], 
						['warsaw', 'is', 'poland', 'capital'], 
                        ['she', 'is', 'a', 'queen', 'she', 'is']]

		self.word2idx = {'a': 0, 'capital': 1, 'he': 2, 'is': 3, 'king': 4, 'poland': 5, 'queen': 6, 'she': 7, 'warsaw': 8}

		self.idx2word = {0: 'a', 1: 'capital', 2: 'he', 3: 'is', 4: 'king', 5: 'poland', 6: 'queen', 7: 'she', 8: 'warsaw'}
		self.vocab_size = 9

		self.cbow_source = [[3, 0], 
							[2, 0, 4], 
							[2, 3, 4], 
							[3, 0], 
							[3, 0], 
							[7, 0, 6], 
							[7, 3, 6], 
							[3, 0], 
							[3, 5], 
							[8, 5, 1], 
							[8, 3, 1], 
							[3, 5], 
							[3, 0], 
							[7, 0, 6], 
							[7, 3, 6, 7], 
							[3, 0, 7, 3], 
							[0, 6, 3], 
							[6, 7]]

		self.cbow_target = [[2], [3], [0], [4], [7], [3], [0], [6], [8], [3], [5], [1], [7], [3], [0], [6], [7], [3]]

		self.cbow_forward = [torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025, -0.0483]]),
						torch.tensor([[-0.0171,  0.0068,  0.0170,  0.0140,  0.0465,  0.0016,  0.0023,  0.0094, -0.0249]]),
						torch.tensor([[-0.0094, -0.0038,  0.0207,  0.0145,  0.0553,  0.0001,  0.0108,  0.0096, -0.0280]]),
						torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025, -0.0483]]),
						torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025, -0.0483]]),
						torch.tensor([[-0.0231,  0.0321,  0.0050,  0.0255,  0.0855, -0.0261,  0.0197,  0.0021, -0.0702]]),
						torch.tensor([[-0.0154,  0.0215,  0.0087,  0.0260,  0.0943, -0.0276,  0.0282,  0.0023, -0.0732]]),
						torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025, -0.0483]]),
						torch.tensor([[ 0.0019,  0.0035,  0.0144,  0.0397,  0.0631, -0.0204,  0.0452,  0.0069, -0.0682]]),
						torch.tensor([[-0.0028,  0.0043,  0.0112,  0.0319,  0.0492, -0.0187,  0.0607,  0.0017, -0.0595]]),
						torch.tensor([[ 0.0015, -0.0021,  0.0118,  0.0396,  0.0711, -0.0155,  0.0609, -0.0010, -0.0493]]),
						torch.tensor([[ 0.0019,  0.0035,  0.0144,  0.0397,  0.0631, -0.0204,  0.0452,  0.0069, -0.0682]]), 
						torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025, -0.0483]]),
						torch.tensor([[-0.0231,  0.0321,  0.0050,  0.0255,  0.0855, -0.0261,  0.0197,  0.0021, -0.0702]]),
						torch.tensor([[-0.0314,  0.0288,  0.0176,  0.0174,  0.0915, -0.0251,  0.0199, -0.0057, -0.0764]]),
						torch.tensor([[-0.0192,  0.0161,  0.0197,  0.0359,  0.0861, -0.0150,  0.0264, -0.0054, -0.0589]]),
						torch.tensor([[ 0.0062,  0.0131, -0.0045,  0.0454,  0.0899, -0.0254,  0.0365,  0.0129, -0.0591]]),
						torch.tensor([[-0.0274,  0.0353,  0.0054,  0.0134,  0.0935, -0.0336,  0.0196,  0.0020, -0.0834]])]

		self.sg_source = [[2], [2], [3], [3], [3], [0], [0], [0], [4], [4], [7], [7], [3], [3], [3], [0], [0], [0], [6], [6], [8], [8], [3], [3], [3], [5], [5], [5], [1], [1], [7], [7], [3], [3], [3], [0], [0], [0], [0], [6], [6], [6], [6], [7], [7], [7], [3], [3]]
		self.sg_target = [[3], [0], [2], [0], [4], [2], [3], [4], [3], [0], [3], [0], [7], [0], [6], [7], [3], [6], [3], [0], [3], [5], [8], [5], [1], [8], [3], [1], [3], [5], [3], [0], [7], [0], [6], [7], [3], [6], [7], [3], [0], [7], [3], [0], [6], [3], [6], [7]]


		self.sg_forward = torch.tensor([[-0.0118,  0.0138,  0.0236,  0.0278,  0.0279,  0.0135, -0.0093, -0.0220, -0.0041],
								        [-0.0118,  0.0138,  0.0236,  0.0278,  0.0279,  0.0135, -0.0093, -0.0220, -0.0041],
								        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028, -0.0529],
								        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028, -0.0529],
								        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028, -0.0529],
								        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023, -0.0438],
								        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023, -0.0438],
								        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023, -0.0438],
								        [-0.0249, -0.0191,  0.0232, -0.0356,  0.0421,  0.0024, -0.0036,  0.0479, -0.0269],
								        [-0.0249, -0.0191,  0.0232, -0.0356,  0.0421,  0.0024, -0.0036,  0.0479, -0.0269],
								        [-0.0792,  0.0508,  0.0440, -0.0084,  0.0829, -0.0177, -0.0051, -0.0296, -0.0861],
								        [-0.0792,  0.0508,  0.0440, -0.0084,  0.0829, -0.0177, -0.0051, -0.0296, -0.0861]])

# 		# v0 local test input and outputs
# 		# Sample input: 
# 		self.corpus_data = ['he is a king', 'she is a queen', 'warsaw is poland capital']
		

# 		# Sample outputs:
# 		self.tokens = [['he', 'is', 'a', 'king'], 
# 						['she', 'is', 'a', 'queen'], 
# 						['warsaw', 'is', 'poland', 'capital']]

# 		self.word2idx = {'a': 0,
# 						  'capital': 1,
# 						  'he': 2,
# 						  'is': 3,
# 						  'king': 4,
# 						  'poland': 5,
# 						  'queen': 6,
# 						  'she': 7,
# 						  'warsaw': 8}

# 		self.idx2word = {0: 'a',
# 						  1: 'capital',
# 						  2: 'he',
# 						  3: 'is',
# 						  4: 'king',
# 						  5: 'poland',
# 						  6: 'queen',
# 						  7: 'she',
# 						  8: 'warsaw'}

# 		self.vocab_size = 9

# 		self.cbow_source = [[3, 0],
# 							  [2, 0, 4],
# 							  [2, 3, 4],
# 							  [3, 0],
# 							  [3, 0],
# 							  [7, 0, 6],
# 							  [7, 3, 6],
# 							  [3, 0],
# 							  [3, 5],
# 							  [8, 5, 1],
# 							  [8, 3, 1],
# 							  [3, 5]]

# 		self.cbow_target = [[2], [3], [0], [4], [7], [3], [0], [6], [8], [3], [5], [1]]

# 		# self.cbow_forward = [torch.tensor([[-0.0002, -0.0147, -0.0479,  0.0310,  0.0373, -0.0598, -0.0312,  0.0295,
  # #         -0.0465]]),
# 		# 				 torch.tensor([[-0.0209, -0.0314, -0.0731, -0.0185,  0.0152, -0.0689,  0.0116,  0.0351,
# 		# 				          -0.0334]]),
# 		# 				 torch.tensor([[-0.0405,  0.0018, -0.0681, -0.0333, -0.0082, -0.0236, -0.0001,  0.0341,
# 		# 				          -0.0354]]),
# 		# 				 torch.tensor([[-0.0002, -0.0147, -0.0479,  0.0310,  0.0373, -0.0598, -0.0312,  0.0295,
# 		# 				          -0.0465]]),
# 		# 				 torch.tensor([[-0.0002, -0.0147, -0.0479,  0.0310,  0.0373, -0.0598, -0.0312,  0.0295,
# 		# 				          -0.0465]]),
# 		# 				 torch.tensor([[-0.0167, -0.0177, -0.0036,  0.0168,  0.0284, -0.0454, -0.0218,  0.0114,
# 		# 				          -0.0176]]),
# 		# 				 torch.tensor([[-0.0363,  0.0154,  0.0014,  0.0020,  0.0050, -0.0002, -0.0335,  0.0105,
# 		# 				          -0.0195]]),
# 		# 				 torch.tensor([[-0.0002, -0.0147, -0.0479,  0.0310,  0.0373, -0.0598, -0.0312,  0.0295,
# 		# 				          -0.0465]]),
# 		# 				 torch.tensor([[-0.0301,  0.0158, -0.0538,  0.0096, -0.0276, -0.0144, -0.0375, -0.0012,
# 		# 				          -0.0393]]),
# 		# 				 torch.tensor([[-0.0488,  0.0017, -0.1026,  0.0084, -0.0173, -0.0721, -0.0380, -0.0039,
# 		# 				          -0.0686]]),
# 		# 				 torch.tensor([[-0.0485,  0.0145, -0.0936,  0.0079,  0.0025, -0.0570, -0.0454,  0.0156,
# 		# 				          -0.0753]]),
# 		# 				 torch.tensor([[-0.0301,  0.0158, -0.0538,  0.0096, -0.0276, -0.0144, -0.0375, -0.0012,
# 		# 				          -0.0393]])]

# 		self.cbow_forward = [torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025,
  #        -0.0483]]),
# 						 torch.tensor([[-0.0171,  0.0068,  0.0170,  0.0140,  0.0465,  0.0016,  0.0023,  0.0094,
  #        -0.0249]]),
# 						 torch.tensor([[-0.0094, -0.0038,  0.0207,  0.0145,  0.0553,  0.0001,  0.0108,  0.0096,
  #        -0.0280]]),
# 						 torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025,
  #        -0.0483]]),
# 						 torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025,
  #        -0.0483]]),
# 						 torch.tensor([[-0.0231,  0.0321,  0.0050,  0.0255,  0.0855, -0.0261,  0.0197,  0.0021,
  #        -0.0702]]),
# 						 torch.tensor([[-0.0154,  0.0215,  0.0087,  0.0260,  0.0943, -0.0276,  0.0282,  0.0023,
  #        -0.0732]]),
# 						 torch.tensor([[-0.0030,  0.0098,  0.0098,  0.0505,  0.0828, -0.0134,  0.0327,  0.0025,
  #        -0.0483]]),
# 						 torch.tensor([[ 0.0019,  0.0035,  0.0144,  0.0397,  0.0631, -0.0204,  0.0452,  0.0069,
  #        -0.0682]]),
# 						 torch.tensor([[-0.0028,  0.0043,  0.0112,  0.0319,  0.0492, -0.0187,  0.0607,  0.0017,
  #        -0.0595]]),
# 						 torch.tensor([[ 0.0015, -0.0021,  0.0118,  0.0396,  0.0711, -0.0155,  0.0609, -0.0010,
  #        -0.0493]]),
# 						 torch.tensor([[ 0.0019,  0.0035,  0.0144,  0.0397,  0.0631, -0.0204,  0.0452,  0.0069,
  #        -0.0682]])]

# 		self.sg_source = [[2], [2], [3], [3], [3], [0], [0], [0], [4], [4], [7], [7], [3], [3], [3], [0], [0], \
# 							[0], [6], [6], [8], [8], [3], [3], [3], [5], [5], [5], [1], [1]]

# 		self.sg_target = [[3], [0], [2], [0], [4], [2], [3], [4], [3], [0], [3], [0], [7], [0], [6], [7], [3], \
# 							[6], [3], [0], [3], [5], [8], [5], [1], [8], [3], [1], [3], [5]]


# 		self.sg_forward = torch.tensor([[-0.0118,  0.0138,  0.0236,  0.0278,  0.0279,  0.0135, -0.0093, -0.0220,
# 					         -0.0041],
# 					        [-0.0118,  0.0138,  0.0236,  0.0278,  0.0279,  0.0135, -0.0093, -0.0220,
# 					         -0.0041],
# 					        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028,
# 					         -0.0529],
# 					        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028,
# 					         -0.0529],
# 					        [ 0.0085, -0.0061,  0.0153,  0.0512,  0.0960, -0.0156,  0.0455,  0.0028,
# 					         -0.0529],
# 					        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023,
# 					         -0.0438],
# 					        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023,
# 					         -0.0438],
# 					        [-0.0145,  0.0257,  0.0042,  0.0497,  0.0696, -0.0112,  0.0199,  0.0023,
# 					         -0.0438],
# 					        [-0.0249, -0.0191,  0.0232, -0.0356,  0.0421,  0.0024, -0.0036,  0.0479,
# 					         -0.0269],
# 					        [-0.0249, -0.0191,  0.0232, -0.0356,  0.0421,  0.0024, -0.0036,  0.0479,
# 					         -0.0269],
# 					        [-0.0792,  0.0508,  0.0440, -0.0084,  0.0829, -0.0177, -0.0051, -0.0296,
# 					         -0.0861],
# 					        [-0.0792,  0.0508,  0.0440, -0.0084,  0.0829, -0.0177, -0.0051, -0.0296,
# 					         -0.0861]])





